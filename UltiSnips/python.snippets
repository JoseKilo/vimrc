snippet decorator "Python standard decorator" !b
from functools import wraps

def my_decorator(f):
    @wraps(f)
    def wrapper(*args, **kwargs):
        print('Calling decorated function')
        return f(*args, **kwargs)
    return wrapper
endsnippet

snippet context_manager "Python function-based context manager" !b
from contextlib import contextmanager

@contextmanager
def managed_resource(*args, **kwargs):
    # Code to acquire resource, e.g.:
    resource = acquire_resource(*args, **kwargs)
    try:
        yield resource
    finally:
        # Code to release resource, e.g.:
        release_resource(resource)
endsnippet

snippet set "Django settings" !b
from django.conf import settings
endsnippet

snippet log "Import logging" !b
import logging
endsnippet

snippet logger "logger declaration" !b
logger = logging.getLogger('')
endsnippet

snippet pp "print statement" !b
print('C$1')
endsnippet

snippet ee "print to stderr" !b
print('C$1', file=sys.stderr)
endsnippet

snippet ff "print debug fstring" !b
print(f'C$1 {$2=}')
endsnippet

snippet ef "print debug fstring to stderr" !b
print(f'C$1 {$2=}', file=sys.stderr)
endsnippet

snippet ll "logger call" !b
logger.info('C$1')
endsnippet

snippet injector "injector class" !b
class Injector:

    def __init__(self, **kwargs):
        self._objects = kwargs

    async def get(self, name):
        if name not in self._objects:
            builder = getattr(self, "make_{}".format(name))
            dependencies = set(inspect.signature(builder).parameters)
            kwargs = {}
            for dependency in dependencies:
                kwargs[dependency] = await self.get(dependency)

            if asyncio.iscoroutinefunction(builder):
                result = await builder(**kwargs)
            else:
                result = builder(**kwargs)

            self._objects[name] = result

        return self._objects[name]
endsnippet

snippet getattribute "getattribute" !b
def __getattribute__(self, name):
	return object.__getattribute__(self, name)
endsnippet

snippet bound "bind method" !b
setattr(obj, name, types.MethodType(func, obj))
endsnippet

snippet "" "docstring" !b
"""
${1}
"""
endsnippet

snippet sphinx "sphinx docstring" !b
"""
${1}

:param name: The name to use.
:type name: str.
:returns: int -- the return code.
:raises: AttributeError, KeyError

:param name:
	The name to use.

:param kwargs:
	Keyword arguments to pass to \`name\`

:returns:
	int -- the return code.

:raises:
	AttributeError, KeyError

"""
endsnippet

snippet googly "googly docstring" !b
"""
${1}

Args:
	param1 (int): The first parameter.
	param2 (:obj:`str`, optional): The second parameter. Defaults to None.
		Second line of description should be indented.
	*args: Variable length argument list.
	**kwargs: Arbitrary keyword arguments.

Returns:
	bool: True if successful, False otherwise.

	The ``Returns`` section may span multiple lines and paragraphs.
	Following lines should be indented to match the first line.

Raises:
	AttributeError: The ``Raises`` section is a list of all exceptions
		that are relevant to the interface.
	ValueError: If \`param2\` is equal to \`param1\`.
"""
endsnippet

snippet __getattribute__ "__getattribute__ Template" !b
def __getattribute__(self, name):
    import types
    xxx = object.__getattribute__(self, name)
    if isinstance(xxx, types.MethodType):
        def yyy(*args, **kwargs):
            print('C1', name)
            return xxx(*args, **kwargs)
        return yyy
    return xxx
endsnippet

snippet while "while" !b
while True:
    ${1:${VISUAL:pass}}
endsnippet

snippet param "Pytest's parametrize" !b
@pytest.mark.parametrize(('$1', '$2'), (
	('$1', '$2'),
))
endsnippet

snippet param1 "Pytest's parametrize with only 1 parameter" !b
@pytest.mark.parametrize('$1', (
    '$1',
))
endsnippet

snippet parame "parameterized" !b
@parameterized.expand(
    [
        "$1",
        "$2",
    ]
)
endsnippet

snippet utf "utf" !b
# -*- coding: utf-8 -*-
endsnippet

snippet caplog "Pytest's caplog" !b
with caplog.at_level(logging.${2:INFO}):
    ${1:${VISUAL:pass}}

assert [record.message for record in caplog.records] == []
endsnippet

snippet djangotest "Django test case" !b
from django.core.urlresolvers import reverse
from django.test import TestCase


class ${1}Test(TestCase):

	def test_${2}(self):
		"""
		${3}
		"""
		url = reverse('${4}')

		response = self.client.get(url)

		self.assertEqual(response, '')
endsnippet

snippet main "python script with main method" !b


def main():
    pass


if __name__ == '__main__':
    main()
endsnippet

snippet main3 "python script with main method and doc-tests" !b
"""
2 3
4 5 -1

5
8
"""
import sys


def main():
	for line in sys.stdin.readlines():
		line = line.strip()
		print sum(map(int, line.split()))


if __name__ == '__main__':
	import helpers
	helpers.test_module_doc(__doc__, main)
	main()
endsnippet

snippet main2 "Python script with main method and utility to read stdin" !b
from __future__ import division, print_function

import sys


def line(cast=None, split=None):
    line = sys.stdin.readline()
	line = line.strip()
    if isinstance(split, str):
        line = line.split(split)
        if cast is not None:
            line = list(map(cast, line))
    elif cast is not None:
        line = cast(line)
    return line


def process_case(case, things):
    result = 42
    print('Case #{}: {}'.format(case, result))


def main():
    cases = line(int)
    for i in range(cases):
        N = line(int)
        things = line(int, ' ')
        assert len(things) == N
        process_case(i + 1, things)


if __name__ == '__main__':
    main()
endsnippet

snippet main4 "Minimalist Python script" !b
import sys


def main():
    numbers = sorted(map(int, sys.stdin.readlines()))
	print(len(numbers))


if __name__ == '__main__':
    main()
endsnippet

snippet branchandbound "Branch and Bound schema" !b
class State(object):

    def __init__(self):
        pass

    def is_possible(self):
        return True

    def is_solution(self):
        return False

    def score(self, k):
        return 0

    def children(self, k):
        return []


class BranchAndBound(object):

	def __init__(self):
        self.optimum = 0
        self.state = None

    def store(self, state, optimum):
        self.state = state
        self.optimum = optimum

    def solution(self):
        if self.state is not None and self.state.is_solution():
            return self.state.cost
        else:
            return None

    def run(self, state):
        self.branch_and_bound(state, 0)

    def _branch_and_bound(self, state, k):
        children = state.children(k)
        while children:
            state, k = children.pop()
            score = state.score(k)
            if state.is_possible(k) and score < self.optimum:
                if state.is_solution():
                    self.store(state, score)
                else:
                    self.branch_and_bound(state, k + 1)

    def _branch_and_bound(self, state):
        children = state.children()
        while children:
            state = children.pop()
            score = state.score()
            if state.is_possible() and score > self.optimum:
                if state.is_solution():
                    self.store(state, score)
                else:
                    new_children = state.children()
                    new_children += children
                    children = new_children

    def branch_and_bound(self, state):
		# 1)
        queue = []
        for child in state.children():
            heapq.heappush(queue, (- child.score() - child.heuristic(), child))

		# 2)
        queue = [state]

        while queue:
            _, state = heapq.heappop(queue)
            score = state.score()
            heuristic = state.heuristic()
            if state.is_possible() and score + heuristic > self.optimum:
                if state.is_solution():
                    self.store(state, score)
                else:
                    for child in state.children():
                        heapq.heappush(queue, (- child.score() - child.heuristic(), child))


runner = BranchAndBound()
state = State()
runner.run(state)
endsnippet

snippet memoize "memoize decorator" !b
def memoize(f):
    cache = {}

    def inner(*args):
        try:
            return cache[args]
        except KeyError:
            pass

        ret = f(*args)
        cache[args] = ret
        return ret

    return inner
endsnippet

snippet xtry "Try/Except" !b
try:
	${1:${VISUAL}}
except ${2:Exception}:
	pass
endsnippet

snippet raises "Pytest raises" !b
with pytest.raises(${1:Exception}) as exc:
	${2:${VISUAL}}
endsnippet

snippet suppress "contextlib suppress" !b
with contextlib.suppress(${1:Exception}):
	${2:${VISUAL}}
endsnippet

snippet grouper "Itertools grouper recipe" !b
def grouper(iterable, n, fillvalue=None):
    "Collect data into fixed-length chunks or blocks"
    # grouper('ABCDEFG', 3, 'x') --> ABC DEF Gxx"
    args = [iter(iterable)] * n
    return itertools.zip_longest(*args, fillvalue=fillvalue)
endsnippet

snippet setup "Minimal setup.py" !b
#!/usr/bin/env python
import setuptools


setuptools.setup(
    name="my-package",
    version="0.0.1",
    url="https://github.com/.../...",
    author="...",
    author_email="...@.......",
    packages=setuptools.find_packages(include=("my_package*",)),
)
endsnippet

snippet spp "dijkstra" !b
INF = 10 ** 100

def process_case(sequences):
    nodes = {}
    for i, a in enumerate(sequences):
        nodes[i] = []
        for j, b in enumerate(sequences):
            if is_valid(a, b):
                nodes[i].append(j)

    distances = [INF for _ in range(len(sequences))]
    prev = [None for _ in range(len(sequences))]
    distances[0] = 0
    processed = set()

    queue = [(0, 0)]
    while queue:
        _, a = heapq.heappop(queue)

        if a in processed:
            continue

        processed.add(a)

        for b in nodes[a]:
            if distances[a] + 1 < distances[b]:
                distances[b] = distances[a] + 1
                heapq.heappush(queue, (-distances[b], b))  # no - ?
                prev[b] = a

    result = [sequences[1]]
    x = prev[1]
    while x is not None:
        result.append(sequences[x])
        x = prev[x]

    result = '->'.join(reversed(result))

    print(result)
endsnippet

snippet telnet "telnet" !b
from telnet import Telnet


def process_case(strings):
    return 42


HOST = '__IP__'
PORT = 1234


def main(phase):
    with Telnet(HOST, PORT) as telnet:
        read = telnet.read_until(b'Please, provide "TEST" or "SUBMIT"\n')
        telnet.write('{}\n'.format(phase).encode())
        read = telnet.read_until(b'Start!\n')
        while True:
            try:
                read = telnet.read_until(b'\n')
            except EOFError:
                return read.decode().strip()

            read = read.decode().strip().split(' ')
            result = process_case(read)
            result = ','.join(map(str, (i + 1 for i in result)))
            telnet.write('{}\n'.format(result).encode())

            read = telnet.read_until(b'\n')


if __name__ == '__main__':
    print(main('TEST'))
    print(main('SUBMIT'))
endsnippet

snippet backtracking "backtracking" !b
class Backtracking(object):

    def __init__(self, nodes):
        self.marked = defaultdict(bool)
        self.indegree = defaultdict(int)

        for u, vs in nodes.items():
            self.marked[u] = False
            self.indegree[u]

            for v in vs:
                self.indegree[v] += 1

        self.nodes = nodes
        self.solution = []
        self._solutions = []

    def solutions(self):
        return self._solutions

    def solve(self):
        flag = False

        for u in self.nodes:
            if not self.marked[u] and self.indegree[u] == 0:

                self.marked[u] = True
                for v in self.nodes[u]:
                    self.indegree[v] -= 1
                self.solution.append(u)

                self.solve()

                self.marked[u] = False
                for v in self.nodes[u]:
                    self.indegree[v] += 1
                self.solution.remove(u)

                flag = True

        if not flag:
            self._solutions.append(list(self.solution))


nodes = {}
backtracking = Backtracking(nodes)
backtracking.solve()
solutions = backtracking.solutions()
endsnippet

snippet trie "trie" !b
dictionary = defaultdict(dict)
with open(filename) as dictionary_file:
    for word in dictionary_file.read().split('\n'):
        word = word.strip()

        node = dictionary[0]
        for char in word:
            if char in node:
                idx = node[char]
            else:
                idx = len(dictionary)
                node[char] = idx

            node = dictionary[idx]

        node['*'] = True


def is_prefix(prefix):
    node = dictionary[0]
    for char in prefix:
        if char not in node:
            return False

        idx = node[char]
        node = dictionary[idx]

    return True


def is_word(prefix):
    node = dictionary[0]
    for char in prefix:
        if char not in node:
            return False

        idx = node[char]
        node = dictionary[idx]

    return '*' in node
endsnippet

snippet knapsack "knapsack" !b
def process_case(W, weights, productions):
    TAB = [
        [0 for j in range(W + 1)]
        for i in range(len(weights) + 1)
    ]

    for i in range(1, len(weights) + 1):
        for j in range(0, W + 1):
            if weights[i - 1] > j:
                TAB[i][j] = TAB[i - 1][j]
            else:
                TAB[i][j] = max(
                    TAB[i - 1][j],
                    TAB[i - 1][j - weights[i - 1]] + productions[i - 1],
                )

    result = TAB[len(weights)][W]
    print(result)
endsnippet

snippet max-submatrix "max-submatrix" !b
N = len(table)
M = len(table[0])

sum_table = [[0 for _ in range(M)] for _ in range(N)]

for x in range(N):
	for y in range(M):
		sum_table[x][y] = table[x][y]
		if y > 0:
			sum_table[x][y] += sum_table[x][y - 1]

result = 0
for L in range(0, OM):
	for R in range(L, M):
		this_sum = 0
		for row in range(N):
			rowSum = sum_table[row][R]
			if L > 0:
				rowSum -= sum_table[row][L - 1]

			this_sum += rowSum
			result = max(this_sum, result)
			this_sum = max(this_sum, 0)
endsnippet

snippet BFS "BFS" !b
def load():
    initial = tuple(range(9))
    distances = {initial: 0}

    queue = [initial]
    while queue:
        a = queue.pop()
        for b in neighbors(a):
            if b not in distances:
                distances[b] = distances[a] + 1
                queue.insert(0, b)

    return distances
endsnippet

snippet pickle "pickle" !b
def write(distances):
    with open('ch8.data', 'wb') as data_file:
        pickle.dump(distances, data_file, pickle.HIGHEST_PROTOCOL)


def read():
    with open('ch8.data', 'rb') as data_file:
        return pickle.load(data_file)
endsnippet

snippet metaclass "metaclass" !b
class MyMeta(abc.ABCMeta):

    def __new__(cls, name, bases, attrs):
        new_cls = super().__new__(cls, name, bases, attrs)

        return new_cls
endsnippet

snippet pillow "pillow" !b
from __future__ import division, print_function

from PIL import Image


def main():
    image = Image.open('CANTTF.png')

    pixels = image.load()

    width, height = image.size

    for x in range(height):
        for y in range(width):
            pixel = pixels[y, x]
            print('C1', pixel)


if __name__ == '__main__':
    main()
endsnippet

snippet powerset "powerset" !b
def powerset(iterable, min_size=0, max_size=None):
    "powerset([1,2,3]) --> () (1,) (2,) (3,) (1,2) (1,3) (2,3) (1,2,3)"

    s = list(iterable)

    if max_size is None:
        max_size = len(s)

    return itertools.chain.from_iterable(
        itertools.combinations(s, r)
        for r in range(min_size, max_size + 1)
    )
endsnippet

snippet frozencounter "frozencounter" !b
class FrozenCounter(Counter):

    def __hash__(self):
        # return hash(tuple(sorted(self.items())))
        return hash(frozenset(self.items()))
endsnippet

snippet superinit "superinit" !b
def __init__(self, *args, **kwargs):
	super().__init__(*args, **kwargs)
endsnippet

snippet init "init" !b
def __init__(self):
	pass
endsnippet

snippet maxflow "maxflow" !b
INF = 10 ** 100


class NetworkFlow(object):

    def __init__(self, edges, start, end):
        self.edges = edges
        self.start = start
        self.end = end
        self.solution = 0

        self.f = None
        self.p = None

    def augment(self, v, min_edge):
        if v == self.start:
            self.f = min_edge
        elif self.p[v] != -1:
            self.augment(self.p[v], min(min_edge, self.edges[self.p[v]][v]))
            self.edges[self.p[v]][v] -= self.f
            self.edges[v][self.p[v]] += self.f

    def run(self):
        while True:
            self.f = 0
            self.p = defaultdict(lambda: -1)
            dist = defaultdict(lambda: INF)
            dist[self.start] = 0
            queue = [self.start]

            while queue:
                u = queue.pop()
                if u == self.end:
                    break

                for v, weight in self.edges[u].items():
                    if weight > 0 and dist[v] == INF:
                        dist[v] = dist[u] + 1
                        queue.insert(0, v)
                        self.p[v] = u

            self.augment(self.end, INF)

            if self.f == 0:
                break

            self.solution += self.f


edges = defaultdict(dict)

for origin, destination, kind, lanes in roads:
	lanes = int(lanes)
	weight = lanes * (S if kind == 'normal' else D)
	edges[origin][destination] = weight

for u, vs in edges.items():
	for v in vs.keys():
		edges[v].setdefault(u, 0)

start = name
end = 'AwesomeVille'

solver = NetworkFlow(edges, start, end)
solver.run()
endsnippet

snippet spfa "Shortest path faster algorithm" !b
INF = 10 ** 100


def process_case(V, start, end, edges):
    nodes = defaultdict(dict)
    for u, v, w in edges:
        nodes[u][v] = int(w)

    dist = defaultdict(lambda: INF)
    dist[start] = 0
    in_queue = {start}
    times = Counter()
    times[start] += 1

    queue = [start]
    while queue:
        u = queue.pop()
        in_queue.discard(u)

        for v, w in nodes[u].items():
            if dist[u] + w < dist[v]:
                dist[v] = dist[u] + w
                if v not in in_queue:
                    queue.insert(0, v)
                    in_queue.add(v)
                    times[v] += 1

                    if times[v] >= V:
                        return 'BAZINGA'

    result = dist[end]

    return result
endsnippet

snippet freeze "freezegun" !b
from freezegun import freeze_time
@freeze_time("1980-01-01T00:00:01.0123456789")
endsnippet

snippet travel "time_machine" !b
import time_machine
@time_machine.travel("1980-01-01T00:00:01.0123456789", tick=False)
endsnippet

snippet asyncmain "asyncmain" !b
import asyncio


async def main():
    pass


if __name__ == '__main__':
	loop = asyncio.get_event_loop()
    loop.run_until_complete(main())
endsnippet

snippet new "__new__" !b
    def __new__(cls, *args, **kwargs):
        instance = super().__new__(cls, *args, **kwargs)
        return instance
endsnippet

snippet stack "stack" !b
import traceback
traceback.print_stack()
endsnippet

snippet setter "setter" !b
@property
def my_attr(self):
	pass

@my_attr.setter
def my_attr(self, value):
	pass
endsnippet

snippet tofile "tofile" !b
import os


def pp(*args):
    with open('tests.log', 'a+') as ff:
        args = (os.getpid(),) + (args)
        ff.write(' '.join(map(str, args)) + '\n')
endsnippet

snippet _ff "log to file" !b
with open("out.log", "a+") as ff:
    ff.write("C1 {}\n".format(42))
endsnippet

snippet permutations "permutations" !b
itertools.permutations([])
endsnippet

snippet sorted "SortedCollection" !b
from bisect import bisect_left, bisect_right

class SortedCollection:
    '''Sequence sorted by a key function.

    SortedCollection() is much easier to work with than using bisect() directly.
    It supports key functions like those use in sorted(), min(), and max().
    The result of the key function call is saved so that keys can be searched
    efficiently.

    Instead of returning an insertion-point which can be hard to interpret, the
    five find-methods return a specific item in the sequence. They can scan for
    exact matches, the last item less-than-or-equal to a key, or the first item
    greater-than-or-equal to a key.

    Once found, an item's ordinal position can be located with the index() method.
    New items can be added with the insert() and insert_right() methods.
    Old items can be deleted with the remove() method.

    The usual sequence methods are provided to support indexing, slicing,
    length lookup, clearing, copying, forward and reverse iteration, contains
    checking, item counts, item removal, and a nice looking repr.

    Finding and indexing are O(log n) operations while iteration and insertion
    are O(n).  The initial sort is O(n log n).

    The key function is stored in the 'key' attibute for easy introspection or
    so that you can assign a new key function (triggering an automatic re-sort).

    In short, the class was designed to handle all of the common use cases for
    bisect but with a simpler API and support for key functions.

    >>> from pprint import pprint
    >>> from operator import itemgetter

    >>> s = SortedCollection(key=itemgetter(2))
    >>> for record in [
    ...         ('roger', 'young', 30),
    ...         ('angela', 'jones', 28),
    ...         ('bill', 'smith', 22),
    ...         ('david', 'thomas', 32)]:
    ...     s.insert(record)

    >>> pprint(list(s))         # show records sorted by age
    [('bill', 'smith', 22),
     ('angela', 'jones', 28),
     ('roger', 'young', 30),
     ('david', 'thomas', 32)]

    >>> s.find_le(29)           # find oldest person aged 29 or younger
    ('angela', 'jones', 28)
    >>> s.find_lt(28)           # find oldest person under 28
    ('bill', 'smith', 22)
    >>> s.find_gt(28)           # find youngest person over 28
    ('roger', 'young', 30)

    >>> r = s.find_ge(32)       # find youngest person aged 32 or older
    >>> s.index(r)              # get the index of their record
    3
    >>> s[3]                    # fetch the record at that index
    ('david', 'thomas', 32)

    >>> s.key = itemgetter(0)   # now sort by first name
    >>> pprint(list(s))
    [('angela', 'jones', 28),
     ('bill', 'smith', 22),
     ('david', 'thomas', 32),
     ('roger', 'young', 30)]

    '''

    def __init__(self, iterable=(), key=None):
        self._given_key = key
        key = (lambda x: x) if key is None else key
        decorated = sorted((key(item), item) for item in iterable)
        self._keys = [k for k, item in decorated]
        self._items = [item for k, item in decorated]
        self._key = key

    NOT_SET = object()

    def max(self, default=NOT_SET):
        try:
            return self._items[-1]
        except IndexError:
            if default is not self.NOT_SET:
                return default
            raise

    def min(self, default=NOT_SET):
        try:
            return self._items[0]
        except IndexError:
            if default is not self.NOT_SET:
                return default
            raise

    def _getkey(self):
        return self._key

    def _setkey(self, key):
        if key is not self._key:
            self.__init__(self._items, key=key)

    def _delkey(self):
        self._setkey(None)

    key = property(_getkey, _setkey, _delkey, 'key function')

    def clear(self):
        self.__init__([], self._key)

    def copy(self):
        return self.__class__(self, self._key)

    def __len__(self):
        return len(self._items)

    def __getitem__(self, i):
        return self._items[i]

    def __iter__(self):
        return iter(self._items)

    def __reversed__(self):
        return reversed(self._items)

    def __repr__(self):
        return '%s(%r, key=%s)' % (
            self.__class__.__name__,
            self._items,
            getattr(self._given_key, '__name__', repr(self._given_key))
        )

    def __reduce__(self):
        return self.__class__, (self._items, self._given_key)

    def __contains__(self, item):
        k = self._key(item)
        i = bisect_left(self._keys, k)
        j = bisect_right(self._keys, k)
        return item in self._items[i:j]

    def index(self, item):
        'Find the position of an item.  Raise ValueError if not found.'
        k = self._key(item)
        i = bisect_left(self._keys, k)
        j = bisect_right(self._keys, k)
        return self._items[i:j].index(item) + i

    def count(self, item):
        'Return number of occurrences of item'
        k = self._key(item)
        i = bisect_left(self._keys, k)
        j = bisect_right(self._keys, k)
        return self._items[i:j].count(item)

    def insert(self, item):
        'Insert a new item.  If equal keys are found, add to the left'
        k = self._key(item)
        i = bisect_left(self._keys, k)
        self._keys.insert(i, k)
        self._items.insert(i, item)

    def insert_right(self, item):
        'Insert a new item.  If equal keys are found, add to the right'
        k = self._key(item)
        i = bisect_right(self._keys, k)
        self._keys.insert(i, k)
        self._items.insert(i, item)

    def remove(self, item):
        'Remove first occurence of item.  Raise ValueError if not found'
        i = self.index(item)
        del self._keys[i]
        del self._items[i]

    def find(self, k):
        'Return first item with a key == k.  Raise ValueError if not found.'
        i = bisect_left(self._keys, k)
        if i != len(self) and self._keys[i] == k:
            return self._items[i]
        raise ValueError('No item found with key equal to: %r' % (k,))

    def find_le(self, k):
        'Return last item with a key <= k.  Raise ValueError if not found.'
        i = bisect_right(self._keys, k)
        if i:
            return self._items[i-1]
        raise ValueError('No item found with key at or below: %r' % (k,))

    def find_lt(self, k):
        'Return last item with a key < k.  Raise ValueError if not found.'
        i = bisect_left(self._keys, k)
        if i:
            return self._items[i-1]
        raise ValueError('No item found with key below: %r' % (k,))

    def find_ge(self, k):
        'Return first item with a key >= equal to k.  Raise ValueError if not found'
        i = bisect_left(self._keys, k)
        if i != len(self):
            return self._items[i]
        raise ValueError('No item found with key at or above: %r' % (k,))

    def find_gt(self, k):
        'Return first item with a key > k.  Raise ValueError if not found'
        i = bisect_right(self._keys, k)
        if i != len(self):
            return self._items[i]
        raise ValueError('No item found with key above: %r' % (k,))
endsnippet

snippet manhattan "manhattan" !b
def manhattan(x1, y1, x2, y2):
    return abs(x1 - x2) + abs(y1 - y2)
endsnippet

snippet http_server "http server" !b
import json
from http.server import BaseHTTPRequestHandler, HTTPServer


class HTTPRequestHandler(BaseHTTPRequestHandler):
    RESPONSES = {
        ("GET", "/"): {},
    }

    def do_GET(self):
        self.do_request("GET")

    def do_POST(self):
        self.do_request("POST")

    def do_request(self, method):
        try:
            body = self.RESPONSES[(method, self.path)]
        except KeyError:
            body = f"Method: '{method}' Path: '{self.path}' not registered"
            status_code = 500
        else:
            status_code = 200

        self.send_response(status_code)
        self.end_headers()
        self.wfile.write(json.dumps(body).encode())
        self.wfile.write(b"")


def main(handler, port=8123):
    server_address = ("", port)
    httpd = HTTPServer(server_address, handler)
    httpd.serve_forever()


if __name__ == "__main__":
    main(handler=HTTPRequestHandler)
endsnippet

snippet subclasses "subclasses" !b
def all_subclasses(cls):
    return set(cls.__subclasses__()) | {
        s for c in cls.__subclasses__() for s in all_subclasses(c)
    }
endsnippet

snippet test "basic test_foo" !b
def test_${1:${VISUAL:foo}}():
    result = $1()
endsnippet
